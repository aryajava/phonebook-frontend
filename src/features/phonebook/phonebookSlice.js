// src/features/phonebook/phonebookSlice.js
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getPhonebooks, addContact, editContact, deleteContact, getAvatarContact, updateAvatarContact } from './api/phonebookApi';

const initialState = {
  phonebookItems: [],
  isFetching: false,
  searchKeyword: '',
  sortOrder: 'asc',
  page: 1,
  isEditModalVisible: false,
  isDeleteModalVisible: false,
  itemToDelete: null,
};

export const getPhonebooksAsync = createAsyncThunk(
  'phonebook/getPhonebooks',
  async (page, keyword, sort) => {
    try {
      const { data } = await getPhonebooks(page, keyword, sort);
      return data;
    } catch (error) {
      return [];
    }
  }
)

export const phonebookSlice = createSlice({
  name: 'phonebook',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: state => {
      state.value += 1
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(getPhonebooksAsync.pending, state => {
        state.status = 'loading'
      })
      .addCase(getPhonebooksAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value += action.payload
      })
  }
})

export const { increment, decrement, incrementByAmount } = phonebookSlice.actions
export const selectPhonebooks = state => state.phonebooks.value

// const phonebookSlice = createSlice({
//   name: 'phonebook',
//   initialState,
//   reducers: {
//     setItems: (state, action) => {
//       state.phonebookItems = action.payload.page === 1 ?
//         action.payload.phonebooks :
//         [...state.phonebookItems, ...action.payload.phonebooks];
//     },
//     setFetching: (state, action) => {
//       state.isFetching = action.payload;
//     },
//     setPage: (state, action) => {
//       state.page = action.payload;
//     },
//     setSearchKeyword: (state, action) => {
//       state.searchKeyword = action.payload;
//     },
//     setSortOrder: (state, action) => {
//       state.sortOrder = action.payload;
//     },
//     reset: (state, action) => {
//       state.phonebookItems = [];
//       state.page = 1;
//       state.searchKeyword = action.payload.keyword;
//       state.sortOrder = action.payload.order;
//     },
//     addItem: (state, action) => {
//       state.phonebookItems = [action.payload, ...state.phonebookItems];
//     },
//     updateItem: (state, action) => {
//       state.phonebookItems = state.phonebookItems.map((item) =>
//         item.id === action.payload.id ? action.payload.updatedItem : item
//       );
//     },
//     showDeleteModal: (state, action) => {
//       state.isDeleteModalVisible = true;
//       state.itemToDelete = action.payload;
//     },
//     closeDeleteModal: (state) => {
//       state.isDeleteModalVisible = false;
//       state.itemToDelete = null;
//     },
//     removeItem: (state, action) => {
//       state.phonebookItems = state.phonebookItems.filter(item => item.id !== action.payload.id);
//     },
//   },
// });

// export const {
//   setItems,
//   setFetching,
//   setPage,
//   setSearchKeyword,
//   setSortOrder,
//   reset,
//   addItem,
//   updateItem,
//   showDeleteModal,
//   closeDeleteModal,
//   removeItem,
// } = phonebookSlice.actions;

export default phonebookSlice.reducer;